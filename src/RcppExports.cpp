// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// as_integer
IntegerVector as_integer(CharacterVector x);
RcppExport SEXP _epistasisGA_as_integer(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_integer(x));
    return rcpp_result_gen;
END_RCPP
}
// scalar_min
int scalar_min(int x, int y);
RcppExport SEXP _epistasisGA_scalar_min(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(scalar_min(x, y));
    return rcpp_result_gen;
END_RCPP
}
// scalar_max
int scalar_max(int x, int y);
RcppExport SEXP _epistasisGA_scalar_max(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(scalar_max(x, y));
    return rcpp_result_gen;
END_RCPP
}
// concat
IntegerVector concat(IntegerVector x, IntegerVector y);
RcppExport SEXP _epistasisGA_concat(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(concat(x, y));
    return rcpp_result_gen;
END_RCPP
}
// concat_list
List concat_list(List x, List y);
RcppExport SEXP _epistasisGA_concat_list(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(concat_list(x, y));
    return rcpp_result_gen;
END_RCPP
}
// sort_by_order
IntegerVector sort_by_order(IntegerVector x, NumericVector y, int sort_type);
RcppExport SEXP _epistasisGA_sort_by_order(SEXP xSEXP, SEXP ySEXP, SEXP sort_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type sort_type(sort_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(sort_by_order(x, y, sort_type));
    return rcpp_result_gen;
END_RCPP
}
// seq_by2
IntegerVector seq_by2(int l);
RcppExport SEXP _epistasisGA_seq_by2(SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_by2(l));
    return rcpp_result_gen;
END_RCPP
}
// unique_chrom_list
LogicalVector unique_chrom_list(List chromosome_list, int chrom_size);
RcppExport SEXP _epistasisGA_unique_chrom_list(SEXP chromosome_listSEXP, SEXP chrom_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< int >::type chrom_size(chrom_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(unique_chrom_list(chromosome_list, chrom_size));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix_cols
IntegerMatrix subset_matrix_cols(IntegerMatrix in_matrix, IntegerVector cols);
RcppExport SEXP _epistasisGA_subset_matrix_cols(SEXP in_matrixSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type in_matrix(in_matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix_cols(in_matrix, cols));
    return rcpp_result_gen;
END_RCPP
}
// subset_lmatrix_cols
LogicalMatrix subset_lmatrix_cols(LogicalMatrix in_matrix, IntegerVector cols);
RcppExport SEXP _epistasisGA_subset_lmatrix_cols(SEXP in_matrixSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type in_matrix(in_matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_lmatrix_cols(in_matrix, cols));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix_rows
Rcpp::IntegerMatrix subset_matrix_rows(Rcpp::IntegerMatrix in_matrix, Rcpp::IntegerVector rows);
RcppExport SEXP _epistasisGA_subset_matrix_rows(SEXP in_matrixSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type in_matrix(in_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix_rows(in_matrix, rows));
    return rcpp_result_gen;
END_RCPP
}
// subset_lmatrix_rows
Rcpp::LogicalMatrix subset_lmatrix_rows(Rcpp::LogicalMatrix in_matrix, Rcpp::IntegerVector rows);
RcppExport SEXP _epistasisGA_subset_lmatrix_rows(SEXP in_matrixSEXP, SEXP rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type in_matrix(in_matrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rows(rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_lmatrix_rows(in_matrix, rows));
    return rcpp_result_gen;
END_RCPP
}
// sign_scalar
int sign_scalar(int x);
RcppExport SEXP _epistasisGA_sign_scalar(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sign_scalar(x));
    return rcpp_result_gen;
END_RCPP
}
// subset_matrix
IntegerMatrix subset_matrix(IntegerMatrix in_matrix, IntegerVector rows, IntegerVector cols);
RcppExport SEXP _epistasisGA_subset_matrix(SEXP in_matrixSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type in_matrix(in_matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_matrix(in_matrix, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// subset_lmatrix
LogicalMatrix subset_lmatrix(LogicalMatrix in_matrix, IntegerVector rows, IntegerVector cols);
RcppExport SEXP _epistasisGA_subset_lmatrix(SEXP in_matrixSEXP, SEXP rowsSEXP, SEXP colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type in_matrix(in_matrixSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type rows(rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cols(colsSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_lmatrix(in_matrix, rows, cols));
    return rcpp_result_gen;
END_RCPP
}
// weighted_sub_colsums
NumericVector weighted_sub_colsums(IntegerMatrix x, IntegerMatrix y, IntegerVector target_rows, IntegerVector target_cols, IntegerVector row_weights);
RcppExport SEXP _epistasisGA_weighted_sub_colsums(SEXP xSEXP, SEXP ySEXP, SEXP target_rowsSEXP, SEXP target_colsSEXP, SEXP row_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_rows(target_rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type row_weights(row_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_sub_colsums(x, y, target_rows, target_cols, row_weights));
    return rcpp_result_gen;
END_RCPP
}
// sub_rowsums_start
IntegerVector sub_rowsums_start(IntegerMatrix x, IntegerMatrix y, IntegerVector target_cols);
RcppExport SEXP _epistasisGA_sub_rowsums_start(SEXP xSEXP, SEXP ySEXP, SEXP target_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_rowsums_start(x, y, target_cols));
    return rcpp_result_gen;
END_RCPP
}
// sub_rowsums_parent_weights
List sub_rowsums_parent_weights(IntegerMatrix x, IntegerMatrix y, IntegerVector target_cols);
RcppExport SEXP _epistasisGA_sub_rowsums_parent_weights(SEXP xSEXP, SEXP ySEXP, SEXP target_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_rowsums_parent_weights(x, y, target_cols));
    return rcpp_result_gen;
END_RCPP
}
// sub_colsums
IntegerVector sub_colsums(IntegerMatrix in_mat, IntegerVector target_rows, IntegerVector target_cols, int target_val);
RcppExport SEXP _epistasisGA_sub_colsums(SEXP in_matSEXP, SEXP target_rowsSEXP, SEXP target_colsSEXP, SEXP target_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_rows(target_rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    Rcpp::traits::input_parameter< int >::type target_val(target_valSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_colsums(in_mat, target_rows, target_cols, target_val));
    return rcpp_result_gen;
END_RCPP
}
// sub_rowsums_both_one
IntegerVector sub_rowsums_both_one(IntegerMatrix x, IntegerMatrix y, IntegerVector target_rows, IntegerVector target_cols);
RcppExport SEXP _epistasisGA_sub_rowsums_both_one(SEXP xSEXP, SEXP ySEXP, SEXP target_rowsSEXP, SEXP target_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type y(ySEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_rows(target_rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_rowsums_both_one(x, y, target_rows, target_cols));
    return rcpp_result_gen;
END_RCPP
}
// n_pos_high_risk
IntegerVector n_pos_high_risk(IntegerMatrix in_mat, IntegerVector target_rows, IntegerVector target_cols);
RcppExport SEXP _epistasisGA_n_pos_high_risk(SEXP in_matSEXP, SEXP target_rowsSEXP, SEXP target_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_rows(target_rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(n_pos_high_risk(in_mat, target_rows, target_cols));
    return rcpp_result_gen;
END_RCPP
}
// n_neg_high_risk
IntegerVector n_neg_high_risk(IntegerMatrix in_mat, IntegerVector target_rows, IntegerVector target_cols);
RcppExport SEXP _epistasisGA_n_neg_high_risk(SEXP in_matSEXP, SEXP target_rowsSEXP, SEXP target_colsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_rows(target_rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    rcpp_result_gen = Rcpp::wrap(n_neg_high_risk(in_mat, target_rows, target_cols));
    return rcpp_result_gen;
END_RCPP
}
// sub_colmeans
NumericVector sub_colmeans(IntegerMatrix in_mat, IntegerVector target_rows, IntegerVector target_cols, int target_val);
RcppExport SEXP _epistasisGA_sub_colmeans(SEXP in_matSEXP, SEXP target_rowsSEXP, SEXP target_colsSEXP, SEXP target_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_rows(target_rowsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_cols(target_colsSEXP);
    Rcpp::traits::input_parameter< int >::type target_val(target_valSEXP);
    rcpp_result_gen = Rcpp::wrap(sub_colmeans(in_mat, target_rows, target_cols, target_val));
    return rcpp_result_gen;
END_RCPP
}
// split_int_mat
ListOf<IntegerMatrix> split_int_mat(IntegerMatrix in_mat, IntegerVector in_vec, IntegerVector uni_in_vec);
RcppExport SEXP _epistasisGA_split_int_mat(SEXP in_matSEXP, SEXP in_vecSEXP, SEXP uni_in_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type in_vec(in_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_in_vec(uni_in_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(split_int_mat(in_mat, in_vec, uni_in_vec));
    return rcpp_result_gen;
END_RCPP
}
// split_logical_mat
ListOf<LogicalMatrix> split_logical_mat(LogicalMatrix in_mat, IntegerVector in_vec, IntegerVector uni_in_vec);
RcppExport SEXP _epistasisGA_split_logical_mat(SEXP in_matSEXP, SEXP in_vecSEXP, SEXP uni_in_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< LogicalMatrix >::type in_mat(in_matSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type in_vec(in_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_in_vec(uni_in_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(split_logical_mat(in_mat, in_vec, uni_in_vec));
    return rcpp_result_gen;
END_RCPP
}
// get_target_snps_ld_blocks
IntegerVector get_target_snps_ld_blocks(IntegerVector target_snps_in, IntegerVector ld_block_vec);
RcppExport SEXP _epistasisGA_get_target_snps_ld_blocks(SEXP target_snps_inSEXP, SEXP ld_block_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_in(target_snps_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(get_target_snps_ld_blocks(target_snps_in, ld_block_vec));
    return rcpp_result_gen;
END_RCPP
}
// find_high_risk
List find_high_risk(int n_target, int n_pos, int n_neg, IntegerVector neg_risk_int, IntegerVector pos_risk_int, IntegerMatrix case_data, IntegerMatrix comp, IntegerVector informative_families, IntegerVector target_snps);
RcppExport SEXP _epistasisGA_find_high_risk(SEXP n_targetSEXP, SEXP n_posSEXP, SEXP n_negSEXP, SEXP neg_risk_intSEXP, SEXP pos_risk_intSEXP, SEXP case_dataSEXP, SEXP compSEXP, SEXP informative_familiesSEXP, SEXP target_snpsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_target(n_targetSEXP);
    Rcpp::traits::input_parameter< int >::type n_pos(n_posSEXP);
    Rcpp::traits::input_parameter< int >::type n_neg(n_negSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type neg_risk_int(neg_risk_intSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pos_risk_int(pos_risk_intSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type case_data(case_dataSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type comp(compSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type informative_families(informative_familiesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps(target_snpsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_high_risk(n_target, n_pos, n_neg, neg_risk_int, pos_risk_int, case_data, comp, informative_families, target_snps));
    return rcpp_result_gen;
END_RCPP
}
// compute_dif_vecs
List compute_dif_vecs(IntegerMatrix case_genetic_data, IntegerMatrix comp_genetic_data, IntegerVector target_snps, IntegerVector both_one_snps, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight);
RcppExport SEXP _epistasisGA_compute_dif_vecs(SEXP case_genetic_dataSEXP, SEXP comp_genetic_dataSEXP, SEXP target_snpsSEXP, SEXP both_one_snpsSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type comp_genetic_data(comp_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps(target_snpsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type both_one_snps(both_one_snpsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dif_vecs(case_genetic_data, comp_genetic_data, target_snps, both_one_snps, weight_lookup, n_different_snps_weight, n_both_one_weight));
    return rcpp_result_gen;
END_RCPP
}
// chrom_fitness_score
List chrom_fitness_score(IntegerMatrix case_genetic_data_in, IntegerMatrix complement_genetic_data_in, IntegerVector target_snps_in, IntegerVector ld_block_vec, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool epi_test);
RcppExport SEXP _epistasisGA_chrom_fitness_score(SEXP case_genetic_data_inSEXP, SEXP complement_genetic_data_inSEXP, SEXP target_snps_inSEXP, SEXP ld_block_vecSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP epi_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type case_genetic_data_in(case_genetic_data_inSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type complement_genetic_data_in(complement_genetic_data_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_in(target_snps_inSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type epi_test(epi_testSEXP);
    rcpp_result_gen = Rcpp::wrap(chrom_fitness_score(case_genetic_data_in, complement_genetic_data_in, target_snps_in, ld_block_vec, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, epi_test));
    return rcpp_result_gen;
END_RCPP
}
// GxE_fitness_score_mvlm
List GxE_fitness_score_mvlm(NumericMatrix case_genetic_data_, NumericMatrix mom_genetic_data_, NumericMatrix dad_genetic_data_, NumericMatrix exposure_mat_, arma::uvec target_snps, arma::vec weight_lookup, arma::vec null_means, arma::vec null_se, bool continuous_exp, NumericVector exposure_quantile_vec, int n_different_snps_weight, int n_both_one_weight, bool permute_exposure);
RcppExport SEXP _epistasisGA_GxE_fitness_score_mvlm(SEXP case_genetic_data_SEXP, SEXP mom_genetic_data_SEXP, SEXP dad_genetic_data_SEXP, SEXP exposure_mat_SEXP, SEXP target_snpsSEXP, SEXP weight_lookupSEXP, SEXP null_meansSEXP, SEXP null_seSEXP, SEXP continuous_expSEXP, SEXP exposure_quantile_vecSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP permute_exposureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type case_genetic_data_(case_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mom_genetic_data_(mom_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dad_genetic_data_(dad_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type exposure_mat_(exposure_mat_SEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type target_snps(target_snpsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_means(null_meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_se(null_seSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous_exp(continuous_expSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exposure_quantile_vec(exposure_quantile_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< bool >::type permute_exposure(permute_exposureSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_fitness_score_mvlm(case_genetic_data_, mom_genetic_data_, dad_genetic_data_, exposure_mat_, target_snps, weight_lookup, null_means, null_se, continuous_exp, exposure_quantile_vec, n_different_snps_weight, n_both_one_weight, permute_exposure));
    return rcpp_result_gen;
END_RCPP
}
// chrom_fitness_list
List chrom_fitness_list(IntegerMatrix case_genetic_data, IntegerMatrix complement_genetic_data, List chromosome_list, IntegerVector ld_block_vec, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool epi_test);
RcppExport SEXP _epistasisGA_chrom_fitness_list(SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP chromosome_listSEXP, SEXP ld_block_vecSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP epi_testSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type epi_test(epi_testSEXP);
    rcpp_result_gen = Rcpp::wrap(chrom_fitness_list(case_genetic_data, complement_genetic_data, chromosome_list, ld_block_vec, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, epi_test));
    return rcpp_result_gen;
END_RCPP
}
// GxE_fitness_score_mvlm_list
List GxE_fitness_score_mvlm_list(NumericMatrix case_genetic_data_, NumericMatrix mom_genetic_data_, NumericMatrix dad_genetic_data_, NumericMatrix exposure_mat_, List chromosome_list, arma::vec weight_lookup, arma::vec null_means, arma::vec null_se, bool continuous_exp, NumericVector exposure_quantile_vec, int n_different_snps_weight, int n_both_one_weight);
RcppExport SEXP _epistasisGA_GxE_fitness_score_mvlm_list(SEXP case_genetic_data_SEXP, SEXP mom_genetic_data_SEXP, SEXP dad_genetic_data_SEXP, SEXP exposure_mat_SEXP, SEXP chromosome_listSEXP, SEXP weight_lookupSEXP, SEXP null_meansSEXP, SEXP null_seSEXP, SEXP continuous_expSEXP, SEXP exposure_quantile_vecSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type case_genetic_data_(case_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mom_genetic_data_(mom_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dad_genetic_data_(dad_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type exposure_mat_(exposure_mat_SEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_means(null_meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_se(null_seSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous_exp(continuous_expSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exposure_quantile_vec(exposure_quantile_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_fitness_score_mvlm_list(case_genetic_data_, mom_genetic_data_, dad_genetic_data_, exposure_mat_, chromosome_list, weight_lookup, null_means, null_se, continuous_exp, exposure_quantile_vec, n_different_snps_weight, n_both_one_weight));
    return rcpp_result_gen;
END_RCPP
}
// GxE_mvlm_fitness_vec_mat
NumericMatrix GxE_mvlm_fitness_vec_mat(NumericMatrix case_genetic_data_, NumericMatrix mom_genetic_data_, NumericMatrix dad_genetic_data_, NumericMatrix exposure_mat_, List chromosome_list, arma::vec weight_lookup, arma::vec null_means, arma::vec null_se, bool continuous_exp, NumericVector exposure_quantile_vec, int n_different_snps_weight, int n_both_one_weight);
RcppExport SEXP _epistasisGA_GxE_mvlm_fitness_vec_mat(SEXP case_genetic_data_SEXP, SEXP mom_genetic_data_SEXP, SEXP dad_genetic_data_SEXP, SEXP exposure_mat_SEXP, SEXP chromosome_listSEXP, SEXP weight_lookupSEXP, SEXP null_meansSEXP, SEXP null_seSEXP, SEXP continuous_expSEXP, SEXP exposure_quantile_vecSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type case_genetic_data_(case_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mom_genetic_data_(mom_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dad_genetic_data_(dad_genetic_data_SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type exposure_mat_(exposure_mat_SEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_means(null_meansSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_se(null_seSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous_exp(continuous_expSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exposure_quantile_vec(exposure_quantile_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_mvlm_fitness_vec_mat(case_genetic_data_, mom_genetic_data_, dad_genetic_data_, exposure_mat_, chromosome_list, weight_lookup, null_means, null_se, continuous_exp, exposure_quantile_vec, n_different_snps_weight, n_both_one_weight));
    return rcpp_result_gen;
END_RCPP
}
// compute_population_fitness
List compute_population_fitness(IntegerMatrix case_genetic_data, IntegerMatrix complement_genetic_data, IntegerVector ld_block_vec, List chromosome_list, IntegerVector weight_lookup, NumericMatrix case_genetic_data_n, NumericMatrix mom_genetic_data, NumericMatrix dad_genetic_data, NumericMatrix exposure_mat_n, arma::vec weight_lookup_n, arma::vec null_mean_vec, arma::vec null_se_vec, bool continuous_exp, NumericVector exposure_quantile_vec, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, bool E_GADGETS);
RcppExport SEXP _epistasisGA_compute_population_fitness(SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP ld_block_vecSEXP, SEXP chromosome_listSEXP, SEXP weight_lookupSEXP, SEXP case_genetic_data_nSEXP, SEXP mom_genetic_dataSEXP, SEXP dad_genetic_dataSEXP, SEXP exposure_mat_nSEXP, SEXP weight_lookup_nSEXP, SEXP null_mean_vecSEXP, SEXP null_se_vecSEXP, SEXP continuous_expSEXP, SEXP exposure_quantile_vecSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP E_GADGETSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type case_genetic_data_n(case_genetic_data_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mom_genetic_data(mom_genetic_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dad_genetic_data(dad_genetic_dataSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type exposure_mat_n(exposure_mat_nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight_lookup_n(weight_lookup_nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_mean_vec(null_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_se_vec(null_se_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous_exp(continuous_expSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exposure_quantile_vec(exposure_quantile_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type E_GADGETS(E_GADGETSSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_population_fitness(case_genetic_data, complement_genetic_data, ld_block_vec, chromosome_list, weight_lookup, case_genetic_data_n, mom_genetic_data, dad_genetic_data, exposure_mat_n, weight_lookup_n, null_mean_vec, null_se_vec, continuous_exp, exposure_quantile_vec, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, E_GADGETS));
    return rcpp_result_gen;
END_RCPP
}
// find_top_chrom
List find_top_chrom(NumericVector fitness_scores, List chromosome_list, int chromosome_size);
RcppExport SEXP _epistasisGA_find_top_chrom(SEXP fitness_scoresSEXP, SEXP chromosome_listSEXP, SEXP chromosome_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type fitness_scores(fitness_scoresSEXP);
    Rcpp::traits::input_parameter< List >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< int >::type chromosome_size(chromosome_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(find_top_chrom(fitness_scores, chromosome_list, chromosome_size));
    return rcpp_result_gen;
END_RCPP
}
// initiate_population
List initiate_population(int n_candidate_snps, IntegerMatrix case_genetic_data, IntegerMatrix complement_genetic_data, IntegerVector ld_block_vec, int n_chromosomes, int chromosome_size, IntegerVector weight_lookup, NumericMatrix case_genetic_data_n, NumericMatrix mom_genetic_data_n, NumericMatrix dad_genetic_data_n, NumericMatrix exposure_mat_n, arma::vec weight_lookup_n, arma::vec null_mean_vec, arma::vec null_se_vec, bool continuous_exp, NumericVector exposure_quantile_vec, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat, int max_generations, bool initial_sample_duplicates, bool E_GADGETS);
RcppExport SEXP _epistasisGA_initiate_population(SEXP n_candidate_snpsSEXP, SEXP case_genetic_dataSEXP, SEXP complement_genetic_dataSEXP, SEXP ld_block_vecSEXP, SEXP n_chromosomesSEXP, SEXP chromosome_sizeSEXP, SEXP weight_lookupSEXP, SEXP case_genetic_data_nSEXP, SEXP mom_genetic_data_nSEXP, SEXP dad_genetic_data_nSEXP, SEXP exposure_mat_nSEXP, SEXP weight_lookup_nSEXP, SEXP null_mean_vecSEXP, SEXP null_se_vecSEXP, SEXP continuous_expSEXP, SEXP exposure_quantile_vecSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP max_generationsSEXP, SEXP initial_sample_duplicatesSEXP, SEXP E_GADGETSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_candidate_snps(n_candidate_snpsSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type case_genetic_data(case_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type complement_genetic_data(complement_genetic_dataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_chromosomes(n_chromosomesSEXP);
    Rcpp::traits::input_parameter< int >::type chromosome_size(chromosome_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type case_genetic_data_n(case_genetic_data_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mom_genetic_data_n(mom_genetic_data_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dad_genetic_data_n(dad_genetic_data_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type exposure_mat_n(exposure_mat_nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight_lookup_n(weight_lookup_nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_mean_vec(null_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_se_vec(null_se_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous_exp(continuous_expSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exposure_quantile_vec(exposure_quantile_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< int >::type max_generations(max_generationsSEXP);
    Rcpp::traits::input_parameter< bool >::type initial_sample_duplicates(initial_sample_duplicatesSEXP);
    Rcpp::traits::input_parameter< bool >::type E_GADGETS(E_GADGETSSEXP);
    rcpp_result_gen = Rcpp::wrap(initiate_population(n_candidate_snps, case_genetic_data, complement_genetic_data, ld_block_vec, n_chromosomes, chromosome_size, weight_lookup, case_genetic_data_n, mom_genetic_data_n, dad_genetic_data_n, exposure_mat_n, weight_lookup_n, null_mean_vec, null_se_vec, continuous_exp, exposure_quantile_vec, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat, max_generations, initial_sample_duplicates, E_GADGETS));
    return rcpp_result_gen;
END_RCPP
}
// check_convergence
bool check_convergence(int island_cluster_size, List island_populations);
RcppExport SEXP _epistasisGA_check_convergence(SEXP island_cluster_sizeSEXP, SEXP island_populationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type island_cluster_size(island_cluster_sizeSEXP);
    Rcpp::traits::input_parameter< List >::type island_populations(island_populationsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_convergence(island_cluster_size, island_populations));
    return rcpp_result_gen;
END_RCPP
}
// check_max_gens
bool check_max_gens(List island_populations, int max_generations);
RcppExport SEXP _epistasisGA_check_max_gens(SEXP island_populationsSEXP, SEXP max_generationsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type island_populations(island_populationsSEXP);
    Rcpp::traits::input_parameter< int >::type max_generations(max_generationsSEXP);
    rcpp_result_gen = Rcpp::wrap(check_max_gens(island_populations, max_generations));
    return rcpp_result_gen;
END_RCPP
}
// run_GADGETS
List run_GADGETS(int island_cluster_size, int n_migrations, IntegerVector ld_block_vec, int n_chromosomes, int chromosome_size, IntegerVector weight_lookup, NumericVector snp_chisq, IntegerMatrix case_genetic_data_in, IntegerMatrix complement_genetic_data_in, NumericMatrix case_genetic_data_n, NumericMatrix mom_genetic_data_n, NumericMatrix dad_genetic_data_n, NumericMatrix exposure_data_n, arma::vec weight_lookup_n, arma::vec null_mean_vec, arma::vec null_se_vec, bool continuous_exp, NumericVector exposure_quantile_vec, int n_different_snps_weight, int n_both_one_weight, int migration_interval, int gen_same_fitness, int max_generations, bool initial_sample_duplicates, double crossover_prop, double recessive_ref_prop, double recode_test_stat, bool E_GADGETS);
RcppExport SEXP _epistasisGA_run_GADGETS(SEXP island_cluster_sizeSEXP, SEXP n_migrationsSEXP, SEXP ld_block_vecSEXP, SEXP n_chromosomesSEXP, SEXP chromosome_sizeSEXP, SEXP weight_lookupSEXP, SEXP snp_chisqSEXP, SEXP case_genetic_data_inSEXP, SEXP complement_genetic_data_inSEXP, SEXP case_genetic_data_nSEXP, SEXP mom_genetic_data_nSEXP, SEXP dad_genetic_data_nSEXP, SEXP exposure_data_nSEXP, SEXP weight_lookup_nSEXP, SEXP null_mean_vecSEXP, SEXP null_se_vecSEXP, SEXP continuous_expSEXP, SEXP exposure_quantile_vecSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP migration_intervalSEXP, SEXP gen_same_fitnessSEXP, SEXP max_generationsSEXP, SEXP initial_sample_duplicatesSEXP, SEXP crossover_propSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP E_GADGETSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type island_cluster_size(island_cluster_sizeSEXP);
    Rcpp::traits::input_parameter< int >::type n_migrations(n_migrationsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type ld_block_vec(ld_block_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_chromosomes(n_chromosomesSEXP);
    Rcpp::traits::input_parameter< int >::type chromosome_size(chromosome_sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type snp_chisq(snp_chisqSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type case_genetic_data_in(case_genetic_data_inSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type complement_genetic_data_in(complement_genetic_data_inSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type case_genetic_data_n(case_genetic_data_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mom_genetic_data_n(mom_genetic_data_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dad_genetic_data_n(dad_genetic_data_nSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type exposure_data_n(exposure_data_nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weight_lookup_n(weight_lookup_nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_mean_vec(null_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_se_vec(null_se_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type continuous_exp(continuous_expSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type exposure_quantile_vec(exposure_quantile_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type migration_interval(migration_intervalSEXP);
    Rcpp::traits::input_parameter< int >::type gen_same_fitness(gen_same_fitnessSEXP);
    Rcpp::traits::input_parameter< int >::type max_generations(max_generationsSEXP);
    Rcpp::traits::input_parameter< bool >::type initial_sample_duplicates(initial_sample_duplicatesSEXP);
    Rcpp::traits::input_parameter< double >::type crossover_prop(crossover_propSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type E_GADGETS(E_GADGETSSEXP);
    rcpp_result_gen = Rcpp::wrap(run_GADGETS(island_cluster_size, n_migrations, ld_block_vec, n_chromosomes, chromosome_size, weight_lookup, snp_chisq, case_genetic_data_in, complement_genetic_data_in, case_genetic_data_n, mom_genetic_data_n, dad_genetic_data_n, exposure_data_n, weight_lookup_n, null_mean_vec, null_se_vec, continuous_exp, exposure_quantile_vec, n_different_snps_weight, n_both_one_weight, migration_interval, gen_same_fitness, max_generations, initial_sample_duplicates, crossover_prop, recessive_ref_prop, recode_test_stat, E_GADGETS));
    return rcpp_result_gen;
END_RCPP
}
// epistasis_test_permute
double epistasis_test_permute(arma::mat case_inf, arma::mat comp_inf, IntegerVector target_snps_ld_blocks, IntegerVector uni_ld_blocks, int n_families, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat);
RcppExport SEXP _epistasisGA_epistasis_test_permute(SEXP case_infSEXP, SEXP comp_infSEXP, SEXP target_snps_ld_blocksSEXP, SEXP uni_ld_blocksSEXP, SEXP n_familiesSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type case_inf(case_infSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type comp_inf(comp_infSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_ld_blocks(target_snps_ld_blocksSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_ld_blocks(uni_ld_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type n_families(n_familiesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    rcpp_result_gen = Rcpp::wrap(epistasis_test_permute(case_inf, comp_inf, target_snps_ld_blocks, uni_ld_blocks, n_families, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat));
    return rcpp_result_gen;
END_RCPP
}
// epistasis_test_null_scores
NumericVector epistasis_test_null_scores(int n_permutes, arma::mat case_inf, arma::mat comp_inf, IntegerVector target_snps_ld_blocks, IntegerVector uni_ld_blocks, int n_families, IntegerVector weight_lookup, int n_different_snps_weight, int n_both_one_weight, double recessive_ref_prop, double recode_test_stat);
RcppExport SEXP _epistasisGA_epistasis_test_null_scores(SEXP n_permutesSEXP, SEXP case_infSEXP, SEXP comp_infSEXP, SEXP target_snps_ld_blocksSEXP, SEXP uni_ld_blocksSEXP, SEXP n_familiesSEXP, SEXP weight_lookupSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type case_inf(case_infSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type comp_inf(comp_infSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type target_snps_ld_blocks(target_snps_ld_blocksSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type uni_ld_blocks(uni_ld_blocksSEXP);
    Rcpp::traits::input_parameter< int >::type n_families(n_familiesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type weight_lookup(weight_lookupSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    rcpp_result_gen = Rcpp::wrap(epistasis_test_null_scores(n_permutes, case_inf, comp_inf, target_snps_ld_blocks, uni_ld_blocks, n_families, weight_lookup, n_different_snps_weight, n_both_one_weight, recessive_ref_prop, recode_test_stat));
    return rcpp_result_gen;
END_RCPP
}
// epistasis_test
List epistasis_test(IntegerVector snp_cols, List preprocessed_list, int n_permutes, int n_different_snps_weight, int n_both_one_weight, int weight_function_int, double recessive_ref_prop, double recode_test_stat, bool warn, bool maternal_fetal);
RcppExport SEXP _epistasisGA_epistasis_test(SEXP snp_colsSEXP, SEXP preprocessed_listSEXP, SEXP n_permutesSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP weight_function_intSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP warnSEXP, SEXP maternal_fetalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type snp_cols(snp_colsSEXP);
    Rcpp::traits::input_parameter< List >::type preprocessed_list(preprocessed_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type weight_function_int(weight_function_intSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< bool >::type warn(warnSEXP);
    Rcpp::traits::input_parameter< bool >::type maternal_fetal(maternal_fetalSEXP);
    rcpp_result_gen = Rcpp::wrap(epistasis_test(snp_cols, preprocessed_list, n_permutes, n_different_snps_weight, n_both_one_weight, weight_function_int, recessive_ref_prop, recode_test_stat, warn, maternal_fetal));
    return rcpp_result_gen;
END_RCPP
}
// GxE_test
List GxE_test(arma::uvec target_snps, List preprocessed_list, arma::vec null_mean_vec, arma::vec null_se_vec, int n_permutes, int n_different_snps_weight, int n_both_one_weight, int weight_function_int);
RcppExport SEXP _epistasisGA_GxE_test(SEXP target_snpsSEXP, SEXP preprocessed_listSEXP, SEXP null_mean_vecSEXP, SEXP null_se_vecSEXP, SEXP n_permutesSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP weight_function_intSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type target_snps(target_snpsSEXP);
    Rcpp::traits::input_parameter< List >::type preprocessed_list(preprocessed_listSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_mean_vec(null_mean_vecSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type null_se_vec(null_se_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type weight_function_int(weight_function_intSEXP);
    rcpp_result_gen = Rcpp::wrap(GxE_test(target_snps, preprocessed_list, null_mean_vec, null_se_vec, n_permutes, n_different_snps_weight, n_both_one_weight, weight_function_int));
    return rcpp_result_gen;
END_RCPP
}
// n2log_epistasis_pvals
NumericVector n2log_epistasis_pvals(ListOf<IntegerVector> chromosome_list, List preprocessed_list, int n_permutes, int n_different_snps_weight, int n_both_one_weight, int weight_function_int, double recessive_ref_prop, double recode_test_stat, Nullable<NumericVector> null_mean_vec_, Nullable<NumericVector> null_se_vec_);
RcppExport SEXP _epistasisGA_n2log_epistasis_pvals(SEXP chromosome_listSEXP, SEXP preprocessed_listSEXP, SEXP n_permutesSEXP, SEXP n_different_snps_weightSEXP, SEXP n_both_one_weightSEXP, SEXP weight_function_intSEXP, SEXP recessive_ref_propSEXP, SEXP recode_test_statSEXP, SEXP null_mean_vec_SEXP, SEXP null_se_vec_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< ListOf<IntegerVector> >::type chromosome_list(chromosome_listSEXP);
    Rcpp::traits::input_parameter< List >::type preprocessed_list(preprocessed_listSEXP);
    Rcpp::traits::input_parameter< int >::type n_permutes(n_permutesSEXP);
    Rcpp::traits::input_parameter< int >::type n_different_snps_weight(n_different_snps_weightSEXP);
    Rcpp::traits::input_parameter< int >::type n_both_one_weight(n_both_one_weightSEXP);
    Rcpp::traits::input_parameter< int >::type weight_function_int(weight_function_intSEXP);
    Rcpp::traits::input_parameter< double >::type recessive_ref_prop(recessive_ref_propSEXP);
    Rcpp::traits::input_parameter< double >::type recode_test_stat(recode_test_statSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type null_mean_vec_(null_mean_vec_SEXP);
    Rcpp::traits::input_parameter< Nullable<NumericVector> >::type null_se_vec_(null_se_vec_SEXP);
    rcpp_result_gen = Rcpp::wrap(n2log_epistasis_pvals(chromosome_list, preprocessed_list, n_permutes, n_different_snps_weight, n_both_one_weight, weight_function_int, recessive_ref_prop, recode_test_stat, null_mean_vec_, null_se_vec_));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epistasisGA_as_integer", (DL_FUNC) &_epistasisGA_as_integer, 1},
    {"_epistasisGA_scalar_min", (DL_FUNC) &_epistasisGA_scalar_min, 2},
    {"_epistasisGA_scalar_max", (DL_FUNC) &_epistasisGA_scalar_max, 2},
    {"_epistasisGA_concat", (DL_FUNC) &_epistasisGA_concat, 2},
    {"_epistasisGA_concat_list", (DL_FUNC) &_epistasisGA_concat_list, 2},
    {"_epistasisGA_sort_by_order", (DL_FUNC) &_epistasisGA_sort_by_order, 3},
    {"_epistasisGA_seq_by2", (DL_FUNC) &_epistasisGA_seq_by2, 1},
    {"_epistasisGA_unique_chrom_list", (DL_FUNC) &_epistasisGA_unique_chrom_list, 2},
    {"_epistasisGA_subset_matrix_cols", (DL_FUNC) &_epistasisGA_subset_matrix_cols, 2},
    {"_epistasisGA_subset_lmatrix_cols", (DL_FUNC) &_epistasisGA_subset_lmatrix_cols, 2},
    {"_epistasisGA_subset_matrix_rows", (DL_FUNC) &_epistasisGA_subset_matrix_rows, 2},
    {"_epistasisGA_subset_lmatrix_rows", (DL_FUNC) &_epistasisGA_subset_lmatrix_rows, 2},
    {"_epistasisGA_sign_scalar", (DL_FUNC) &_epistasisGA_sign_scalar, 1},
    {"_epistasisGA_subset_matrix", (DL_FUNC) &_epistasisGA_subset_matrix, 3},
    {"_epistasisGA_subset_lmatrix", (DL_FUNC) &_epistasisGA_subset_lmatrix, 3},
    {"_epistasisGA_weighted_sub_colsums", (DL_FUNC) &_epistasisGA_weighted_sub_colsums, 5},
    {"_epistasisGA_sub_rowsums_start", (DL_FUNC) &_epistasisGA_sub_rowsums_start, 3},
    {"_epistasisGA_sub_rowsums_parent_weights", (DL_FUNC) &_epistasisGA_sub_rowsums_parent_weights, 3},
    {"_epistasisGA_sub_colsums", (DL_FUNC) &_epistasisGA_sub_colsums, 4},
    {"_epistasisGA_sub_rowsums_both_one", (DL_FUNC) &_epistasisGA_sub_rowsums_both_one, 4},
    {"_epistasisGA_n_pos_high_risk", (DL_FUNC) &_epistasisGA_n_pos_high_risk, 3},
    {"_epistasisGA_n_neg_high_risk", (DL_FUNC) &_epistasisGA_n_neg_high_risk, 3},
    {"_epistasisGA_sub_colmeans", (DL_FUNC) &_epistasisGA_sub_colmeans, 4},
    {"_epistasisGA_split_int_mat", (DL_FUNC) &_epistasisGA_split_int_mat, 3},
    {"_epistasisGA_split_logical_mat", (DL_FUNC) &_epistasisGA_split_logical_mat, 3},
    {"_epistasisGA_get_target_snps_ld_blocks", (DL_FUNC) &_epistasisGA_get_target_snps_ld_blocks, 2},
    {"_epistasisGA_find_high_risk", (DL_FUNC) &_epistasisGA_find_high_risk, 9},
    {"_epistasisGA_compute_dif_vecs", (DL_FUNC) &_epistasisGA_compute_dif_vecs, 7},
    {"_epistasisGA_chrom_fitness_score", (DL_FUNC) &_epistasisGA_chrom_fitness_score, 10},
    {"_epistasisGA_GxE_fitness_score_mvlm", (DL_FUNC) &_epistasisGA_GxE_fitness_score_mvlm, 13},
    {"_epistasisGA_chrom_fitness_list", (DL_FUNC) &_epistasisGA_chrom_fitness_list, 10},
    {"_epistasisGA_GxE_fitness_score_mvlm_list", (DL_FUNC) &_epistasisGA_GxE_fitness_score_mvlm_list, 12},
    {"_epistasisGA_GxE_mvlm_fitness_vec_mat", (DL_FUNC) &_epistasisGA_GxE_mvlm_fitness_vec_mat, 12},
    {"_epistasisGA_compute_population_fitness", (DL_FUNC) &_epistasisGA_compute_population_fitness, 19},
    {"_epistasisGA_find_top_chrom", (DL_FUNC) &_epistasisGA_find_top_chrom, 3},
    {"_epistasisGA_initiate_population", (DL_FUNC) &_epistasisGA_initiate_population, 23},
    {"_epistasisGA_check_convergence", (DL_FUNC) &_epistasisGA_check_convergence, 2},
    {"_epistasisGA_check_max_gens", (DL_FUNC) &_epistasisGA_check_max_gens, 2},
    {"_epistasisGA_run_GADGETS", (DL_FUNC) &_epistasisGA_run_GADGETS, 28},
    {"_epistasisGA_epistasis_test_permute", (DL_FUNC) &_epistasisGA_epistasis_test_permute, 10},
    {"_epistasisGA_epistasis_test_null_scores", (DL_FUNC) &_epistasisGA_epistasis_test_null_scores, 11},
    {"_epistasisGA_epistasis_test", (DL_FUNC) &_epistasisGA_epistasis_test, 10},
    {"_epistasisGA_GxE_test", (DL_FUNC) &_epistasisGA_GxE_test, 8},
    {"_epistasisGA_n2log_epistasis_pvals", (DL_FUNC) &_epistasisGA_n2log_epistasis_pvals, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_epistasisGA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
